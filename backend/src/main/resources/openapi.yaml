openapi: 3.0.4
info:
  title: DreamSellers API
  description: |-
    This is the API specification for the DreamSellers platform, a web application for booking experience-based gifts. Users can browse, book, and manage various adventure and leisure activities, while businesses can list and manage their experience offerings.
    
    Some useful links:
    - [DreamSellers Platform](https://dreamsellers.com)
    - [API Documentation](https://api.dreamsellers.com/docs)
  termsOfService: https://dreamsellers.com/terms/
  contact:
    email: support@dreamsellers.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about DreamSellers
  url: https://dreamsellers.com
servers:
  - url: https://api.dreamsellers.com
    description: Production server
  - url: https://staging.api.dreamsellers.com
    description: Staging server



tags:
  - name: auth
    description: Operations related to authenticatiing userrs
  - name: user
    description: Operations about user
  - name: business
    description: Everything about business
  - name: listing
    description: Access to listings made by businesses
  - name: bookings
    description: Operations related to booking system
  - name: payments
    description: Payment operations
  - name: admin
    description: Access to admin panel

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login user into the system.
      description: Endpoint for handling logging in.
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUserDto'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCredentialsError'
        '401':
          description: Unauthorized, invalid username/password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsError'
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/register:
    post:
      tags:
        - auth
      summary: Register user in the system
      description: Registers new users in the system
      operationId: userRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUserDto'
        '409':
          description: Conflict - email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsError'
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session.
      description: Log user out of the system.
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/request-password-reset:
    post:
      summary: Request password reset
      description: Sends an email with a password reset link.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Password reset email sent.
        '400':
          description: Invalid email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/reset-password:
    post:
      summary: Reset password
      description: Allows a user to reset their password using a token.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password reset successfully.
        '400':
          description: Invalid token or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTokenOrPasswordError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user id.
      description: Get user detail based on username.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched. Use id1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIdError'
        '401':
          description: Unauthorized, user does not have permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      summary: Update user resource.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIdError'
        '401':
          description: Unauthorized, user does not have permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIdError'
        '401':
          description: Unauthorized, user does not have permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/notifications:
    get:
      summary: Get user notifications
      description: Retrieves notifications for the authenticated user.
      tags:
        - user
      responses:
        "200":
          description: List of notifications.
        '401':
          description: Unauthorized, user does not have permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

    put:
      summary: Mark notifications as read
      description: Marks all notifications as read for the authenticated user.
      tags:
        - user
      responses:
        "200":
          description: Notifications marked as read.
        "401":
          description: Unauthorized.


  /listings/get_all:
    get:
      summary: Get all activity listings
      description: Retrieve a list of all available activity listings with filtering and sorting.
      tags:
        - listing
      parameters:
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: location
          in: query
          description: Filter by location
          schema:
            type: string
        - name: rating
          in: query
          description: Filter by minimum rating
          schema:
            type: number
            format: float
        - name: search
          in: query
          description: Search for activities by keyword
          schema:
            type: string
      responses:
        "200":
          description: List of activity listings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListingDto"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /listings/create:
    post:
      summary: Create a new activity listing
      description: Allows a seller to create a new activity listing.
      tags:
        - listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingDto"
      responses:
        "201":
          description: Listing created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingResponseDto"
        '401':
          description: Unauthorized, user does not have permission to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /listings/{listingId}:
    get:
      summary: Get listing details
      description: Retrieve details of a specific activity listing.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Listing details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingDto"
        '404':
          description: Listing not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update listing
      description: Allows a seller to update their activity listing.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingDto"
      responses:
        "200":
          description: Listing updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingResponseDto"
        "403":
          description: Forbidden - only the listing owner can update it.
        "404":
          description: Listing not found.

    delete:
      summary: Delete listing
      description: Allows a seller to remove their activity listing.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Listing deleted successfully.
        "403":
          description: Forbidden - only the listing owner can delete it.
        "404":
          description: Listing not found.
  /listings/{listingId}/reviews:
    post:
      summary: Add a review for a listing
      description: Allows customers to leave a review for a completed activity.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '201':
          description: Review added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDto'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - only customers who booked the activity can leave a review.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get all reviews for a listing
      description: Retrieves all customer reviews for a specific activity listing.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the listing for which reviews are being fetched.
      responses:
        "200":
          description: List of reviews retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewDto"
        "400":
          description: Invalid request or listing ID format.
        "404":
          description: Listing not found or no reviews available.
  /listings/{listingId}/sales:
    get:
      summary: Get sales statistics for a listing
      description: Allows a seller to track sales and popularity of their activity.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sales statistics retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingSalesDto"
        '403':
          description: Forbidden - only the listing owner can view sales data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: Listing not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /listings/{listingId}/cancel-policy:
    put:
      summary: Set custom cancellation policy
      description: Allows a seller to define the refund and cancellation rules for an activity.
      tags:
        - listing
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  type: string
      responses:
        '200':
          description: Cancellation policy updated successfully.
        '403':
          description: Forbidden - only the listing owner can modify this policy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /businesses:
    get:
      summary: Get all businesses
      description: Retrieve a list of all registered businesses.
      tags:
        - business
      responses:
        "200":
          description: List of all businesses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessDto"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /businesses/{businessId}/stats:
    get:
      summary: Get business sales statistics
      description: Retrieve sales and listing popularity statistics for a specific business.
      tags:
        - business
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business.
      responses:
        "200":
          description: Business statistics retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessStatsDto"
        '401':
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Business not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /businesses/{businessId}:
    get:
      summary: Get business details
      description: Retrieve details of a specific business.
      tags:
        - business
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Business details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDto"
        '401':
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Business not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update business information
      description: Allows a seller to update their business details.
      tags:
        - business
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessDto"
      responses:
        "200":
          description: Business updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDto"
        "403":
          description: Forbidden - only the business owner can update the details.
        "404":
          description: Business not found.

    delete:
      summary: Delete a business
      description: Allows a seller to remove their business profile.
      tags:
        - business
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Business deleted successfully.
        "403":
          description: Forbidden - only the business owner can delete it.
        "404":
          description: Business not found.
  /businesses/{businessId}/listings:
    get:
      summary: Get all listings of a business
      description: Retrieve a list of all activity listings under a specific business.
      tags:
        - business
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of all listings for the business.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListingDto"
        '401':
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Business not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /businesses/register:
    post:
      summary: Register a new business
      description: Allows a seller to register their business profile.
      tags:
        - business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessDto"
      responses:
        '201':
          description: Business registered successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessDto"
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users:
    get:
      summary: Get all users (Admin only)
      description: Retrieve a list of all registered users.
      tags:
        - admin
      responses:
        "200":
          description: List of users.
        "403":
          description: Forbidden.
  /admin/users/{userId}/block:
    post:
      summary: Block a user
      description: Blocks a user from accessing the platform.
      tags:
        - admin
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User blocked successfully.
        "403":
          description: Forbidden.
  /admin/users/{userId}/delete:
    delete:
      summary: Delete a user (Admin only)
      description: Deletes a user from the platform.
      tags:
        - admin
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User deleted successfully.
        "403":
          description: Forbidden.
  /admin/listings:
    get:
      summary: Get all listings (Admin only)
      description: Retrieve a list of all activity listings for moderation.
      tags:
        - admin
      responses:
        "200":
          description: List of all activity listings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListingDto"
        "403":
          description: Forbidden - only admins can access this.
  /admin/listings/{listingId}/remove:
    delete:
      summary: Remove a listing (Admin only)
      description: Allows an admin to remove inappropriate or violating listings.
      tags:
        - admin
      parameters:
        - name: listingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Listing removed successfully.
        "403":
          description: Forbidden - only admins can remove listings.
        "404":
          description: Listing not found.
  /admin/businesses:
    get:
      summary: Get all businesses (Admin only)
      description: Retrieve a list of all businesses for moderation.
      tags:
        - admin
      responses:
        "200":
          description: List of all registered businesses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessDto"
        "403":
          description: Forbidden - only admins can access this.
  /admin/businesses/{businessId}/remove:
    delete:
      summary: Remove a business (Admin only)
      description: Allows an admin to remove a business profile for policy violations.
      tags:
        - admin
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Business removed successfully.
        "403":
          description: Forbidden - only admins can remove businesses.
        "404":
          description: Business not found.

  /bookings/create:
    post:
      summary: Create a new booking
      description: Allows a customer to book an activity listing.
      tags:
        - bookings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingDto'
      responses:
        '201':
          description: Booking created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponseDto"
        '400':
          description: Invalid booking details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '403':
          description: Forbidden - Only a Users can create bookings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bookings/{userId}:
    get:
      summary: Get user booking history
      description: Retrieve a list of past and active bookings for the authenticated user.
      tags:
        - bookings
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the user.
      responses:
        "200":
          description: List of bookings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingResponseDto"
        "401":
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bookings/booking/{bookingId}:
    get:
      summary: Get booking details
      description: Retrieve detailed information about a specific booking.
      tags:
        - bookings
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the booking.
      responses:
        "200":
          description: Booking details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponseDto"
        "401":
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Booking not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bookings/{bookingId}/cancel:
    post:
      summary: Cancel booking
      description: Allows a customer to cancel a booking according to the seller’s refund policy.
      tags:
        - bookings
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the booking to cancel.
      responses:
        "200":
          description: Booking canceled successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponseDto"
        "400":
          description: Booking cannot be canceled due to refund policy restrictions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingCancelError"
        "401":
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Booking not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingNotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /payments:
    post:
      summary: Make a payment for a booking
      description: Process a payment for a specific booking.
      tags:
        - payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDto'
      responses:
        "200":
          description: Payment processed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentResponseDto"
        "400":
          description: Invalid payment details or insufficient funds.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentError"
        "401":
          description: Unauthorized - User must be logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Booking not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingNotFoundError"
        "409":
          description: Payment already completed for this booking.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentConflictError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    ReviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the review.
        listingId:
          type: integer
          format: int64
          description: The ID of the listing being reviewed.
        userId:
          type: integer
          format: int64
          description: The ID of the user who left the review.
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5
          description: Star rating given by the user.
        comment:
          type: string
          description: The text content of the review.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the review was submitted.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the review was last updated.
    BusinessStatsDto:
      type: object
      properties:
        totalBookings:
          type: integer
          description: Total number of bookings made.
        totalRevenue:
          type: number
          format: float
          description: Total revenue generated.
        mostPopularListing:
          type: string
          description: The most booked listing ID.
        averageRating:
          type: number
          format: float
          description: Average rating of all listings.

    PaymentDto:
      type: object
      properties:
        bookingId:
          type: integer
          format: int64
          description: The ID of the booking the payment is associated with.
        userId:
          type: integer
          format: int64
          description: The ID of the user who made the payment.
    PaymentResponseDto:
      type: object
      properties:
        bookingId:
          type: integer
          format: int64
          description: The ID of the booking the payment is associated with.

#    Booking:
#      type: object
#      properties:
#        id:
#          type: string
#          description: Unique identifier for the booking.
#        userId:
#          type: string
#          description: The ID of the user who made the booking.
#        listingId:
#          type: string
#          description: The ID of the listing being booked.
#        date:
#          type: string
#          format: date
#          description: The date of the booked activity.
#        participants:
#          type: integer
#          description: The number of participants for the booking.
#        status:
#          type: string
#          enum: [pending, confirmed, canceled, completed]
#          description: The current status of the booking.
#        totalPrice:
#          type: number
#          format: float
#          description: The total price for the booking.
#        paymentStatus:
#          type: string
#          enum: [pending, paid, refunded]
#          description: The payment status for the booking.
#        createdAt:
#          type: string
#          format: date-time
#          description: Timestamp of when the booking was created.
#        updatedAt:
#          type: string
#          format: date-time
#          description: Timestamp of the last update to the booking.
    BusinessDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the business.
          example: 203
        name:
          type: string
          description: Official name of the business.
          example: Adventure Slovenia
        description:
          type: string
          description: Brief description of the business.
          example: Outdoor activity provider offering guided tours and experiences.
        authId:
          type: integer
          format: int64
          description: ID of the seller who owns this business.
          example: 1
        address:
          type: string
          description: Physical or operational address of the business.
          example: Ljubljanska cesta 12, Bled, Slovenia
        createdAt:
          type: string
          format: date-time
          example: 2025-03-25T09:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-04-10T14:30:00Z

    ListingDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the listing.
          example: 101
        title:
          type: string
          description: Name of the activity.
          example: "Sunset Kayaking Tour"
        description:
          type: string
          description: Detailed description of the activity.
          example: "Enjoy a peaceful kayaking tour during golden hour with an experienced guide."
        category:
          type: string
          description: Category of the activity (e.g., adventure, wellness, food).
          example: "adventure"
        location:
          type: string
          description: Address or general location of the activity.
          example: "Lake Bled, Slovenia"
        price:
          type: number
          format: float
          description: Price per person or per booking.
          example: 49.99
        availability:
          type: array
          items:
            type: string
          description: List of available dates and times.
          example:
            - "2025-04-15"
            - "2025-04-16"
            - "2025-04-17"
        images:
          type: array
          items:
            type: string
          description: URLs of images showcasing the activity.
          example:
            - "https://cdn.example.com/images/kayak1.jpg"
            - "https://cdn.example.com/images/kayak2.jpg"
        rating:
          type: number
          format: float
          description: Average rating based on customer reviews.
          example: 4.7
        businessId:
          type: integer
          format: int64
          description: ID of the seller who owns this listing.
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2025-04-01T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-10T12:00:00Z"
    ListingResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the listing.
        title:
          type: string
          description: Name of the activity.

    UserDto:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    ListingSalesDto:
      type: object
      properties:
        listingId:
          type: integer
          format: int64
        totalSales:
          type: integer
        totalRevenue:
          type: number
          format: float
        averageRating:
          type: number
          format: float
        totalReviews:
          type: integer
        soldUnits:
          type: integer
        createdAt:
          type: string
          format: date-time

    AuthenticatedUserDto:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 1
        token:
          type: string
          example: "ASDFGDFHDFgscdcsdGJTRFGWVCSwz....."
    RegisterDto:
      type: object
      properties:
        username:
          type: string
          example: "username"
        password:
          type: string
          example: "123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "johndoe@example.com"
        phone:
          type: string
          example: "+1234567890"
        role:
          type: string
          enum:
            - ROLE_USER
            - ROLE_ADMIN
            - ROLE_BUSINESS
          example: "ROLE_USER"
    LoginDto:
      type: object
      properties:
        username:
          type: string
          example: "username"
        password:
          type: string
          example: "123"


    CreateBookingDto:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 1
        listingId:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          format: date-time
    BookingResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        listingId:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          format: date
          example: "2025-04-07"
        status:
          type: string
          enum:
            - pending
            - confirmed
            - cancelled
          example: "pending"
        totalPrice:
          type: number
          format: float
          example: 0.1
        paymentStatus:
          type: string
          enum:
            - pending
            - paid
            - failed
          example: "pending"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-07T19:19:18.827Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-07T19:19:18.827Z"

    InvalidCredentialsError:
      type: object
      properties:
        error:
          type: string
          example: "Wrong password or login, try again"
        code:
          type: string
          example: "INVALID_CREDENTIALS"
        status:
          type: integer
          example: 400

    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized access, invalid credentials"
        code:
          type: string
          example: "UNAUTHORIZED"
        status:
          type: integer
          example: 401

    TooManyRequestsError:
      type: object
      properties:
        error:
          type: string
          example: "Too many requests, please try again later"
        code:
          type: string
          example: "TOO_MANY_REQUESTS"
        status:
          type: integer
          example: 429

    InternalServerError:
      type: object
      properties:
        error:
          type: string
          example: "Error processing the request"
        code:
          type: string
          example: "INTERNAL_SERVER_ERROR"
        status:
          type: integer
          example: 500
    ConflictError:
      type: object
      properties:
        error:
          type: string
          example: "An account with this email already exists."
        code:
          type: string
          example: "CONFLICT"
        status:
          type: integer
          example: 409
    InvalidEmailError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid email address format."
        code:
          type: string
          example: "INVALID_EMAIL"
        status:
          type: integer
          example: 400
    UserNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: "No user found with the given email address."
        code:
          type: string
          example: "USER_NOT_FOUND"
        status:
          type: integer
          example: 404
    InvalidTokenOrPasswordError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid or expired token, or password doesn't meet requirements."
        code:
          type: string
          example: "INVALID_TOKEN_OR_PASSWORD"
        status:
          type: integer
          example: 400
    InvalidIdError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid user ID format."
        code:
          type: string
          example: "INVALID_ID"
        status:
          type: integer
          example: 400
    ListingNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: "No listing found with the given ID."
        code:
          type: string
          example: "LISTING_NOT_FOUND"
        status:
          type: integer
          example: 404
    ForbiddenError:
      type: object
      properties:
        error:
          type: string
          example: "Only customers who booked this activity can leave a review."
        code:
          type: string
          example: "FORBIDDEN"
        status:
          type: integer
          example: 403
    BusinessNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: "Business not found."
        code:
          type: string
          example: "NOT_FOUND"
        status:
          type: integer
          example: 404
    BookingNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: "Booking not found."
        code:
          type: string
          example: "BOOKING_NOT_FOUND"
        status:
          type: integer
          example: 404
    BookingCancelError:
      type: object
      properties:
        error:
          type: string
          example: "Booking cannot be canceled due to refund policy restrictions."
        code:
          type: string
          example: "CANCELLATION_POLICY_VIOLATION"
        status:
          type: integer
          example: 400
    PaymentError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid payment details or insufficient funds."
        code:
          type: string
          example: "PAYMENT_FAILED"
        status:
          type: integer
          example: 400
    PaymentConflictError:
      type: object
      properties:
        error:
          type: string
          example: "Payment already completed for this booking."
        code:
          type: string
          example: "PAYMENT_ALREADY_COMPLETED"
        status:
          type: integer
          example: 409


  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header





